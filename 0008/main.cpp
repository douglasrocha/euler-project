/*
 * We have to find the 13 adjacent digits from this 1000 digits
 * number that have the highest product. Once we find them, we
 * have to print the response.
 *
 * We solved this exercise by bruteforcing all combinations.
 */

#include <iostream>
#include <string>
#include <sstream>

using namespace std;

typedef unsigned long long int ull;

string get_number_str() {
  stringstream ss;
  ss << "73167176531330624919225119674426574742355349194934";
  ss << "96983520312774506326239578318016984801869478851843";
  ss << "85861560789112949495459501737958331952853208805511";
  ss << "12540698747158523863050715693290963295227443043557";
  ss << "66896648950445244523161731856403098711121722383113";
  ss << "62229893423380308135336276614282806444486645238749";
  ss << "30358907296290491560440772390713810515859307960866";
  ss << "70172427121883998797908792274921901699720888093776";
  ss << "65727333001053367881220235421809751254540594752243";
  ss << "52584907711670556013604839586446706324415722155397";
  ss << "53697817977846174064955149290862569321978468622482";
  ss << "83972241375657056057490261407972968652414535100474";
  ss << "82166370484403199890008895243450658541227588666881";
  ss << "16427171479924442928230863465674813919123162824586";
  ss << "17866458359124566529476545682848912883142607690042";
  ss << "24219022671055626321111109370544217506941658960408";
  ss << "07198403850962455444362981230987879927244284909188";
  ss << "84580156166097919133875499200524063689912560717606";
  ss << "05886116467109405077541002256983155200055935729725";
  ss << "71636269561882670428252483600823257530420752963450";
  return ss.str();
}

int main (void) {
  string number = get_number_str();
  ull max = 0;
  
  for (ull i = 0; i < number.size() - 13; i++) {
    ull product = 1;
    for (ull j = 0; j < 13; j++) {
      product *= number[i + j] - '0';
    }

    if (product > max) {
      max = product;
    }
  }

  cout << max << endl;
  
  return 0;
}
